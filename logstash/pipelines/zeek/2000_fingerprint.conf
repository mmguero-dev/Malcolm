# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.

filter {
  # create a repeatable fingerprint for document ID

  if ([event][dataset] == "bacnet_discovery") {
    fingerprint {
      id => "fingerprint_zeek_bacnet_discovery"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][bacnet][instance_number]",
                  "[zeek][bacnet][pdu_service]",
                  "[zeek][bacnet_discovery][object_type]",
                  "[zeek][bacnet_discovery][device_id_type]",
                  "[zeek][bacnet_discovery][device_id_number]",
                  "[zeek][bacnet_discovery][object_type]",
                  "[zeek][bacnet_discovery][vendor]",
                  "[zeek][bacnet_discovery][range]",
                  "[zeek][bacnet_discovery][object_name]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "bacnet_property") {
    fingerprint {
      id => "fingerprint_zeek_bacnet_property"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][bacnet][instance_number]",
                  "[zeek][bacnet][invoke_id]",
                  "[zeek][bacnet_property][object_type]",
                  "[zeek][bacnet_property][property]",
                  "[zeek][bacnet_property][array_index]",
                  "[zeek][bacnet_property][value]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222") {
    fingerprint {
      id => "fingerprint_zeek_c1222"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][c1222][called_ap_invocation_id]",
                  "[zeek][c1222][called_ap_title]",
                  "[zeek][c1222][calling_ap_invocation_id]",
                  "[zeek][c1222][calling_ap_title]",
                  "[zeek][c1222][calling_auth_value]",
                  "[zeek][c1222][elements]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222_authentication_value") {
    fingerprint {
      id => "fingerprint_zeek_c1222_authentication_value"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][c1222_authentication_value][authentication_mechanism]",
                  "[zeek][c1222_authentication_value][c1222_iv]",
                  "[zeek][c1222_authentication_value][c1222_key_id]",
                  "[zeek][c1222_authentication_value][indirect_reference]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222_dereg_reg_service") {
    fingerprint {
      id => "fingerprint_zeek_c1222_dereg_reg_service"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][c1222][ap_title]",
                  "[zeek][c1222_dereg_reg_service][reg_delay]",
                  "[zeek][c1222_dereg_reg_service][reg_info]",
                  "[zeek][c1222_dereg_reg_service][reg_period]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222_identification_service") {
    fingerprint {
      id => "fingerprint_zeek_c1222_identification_service"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][c1222_identification_service][device_class]",
                  "[zeek][c1222_identification_service][device_identity]",
                  "[zeek][c1222_identification_service][device_identity_format]",
                  "[zeek][c1222_identification_service][nbr_session_supported]",
                  "[zeek][c1222_identification_service][security_mechanism]",
                  "[zeek][c1222_identification_service][sessionless_supported]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222_logon_security_service") {
    fingerprint {
      id => "fingerprint_zeek_c1222_logon_security_service"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]",
                  "[related][user]",
                  "[related][password]",
                  "[zeek][c1222_logon_security_service][session_idle_timeout]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222_read_write_service") {
    fingerprint {
      id => "fingerprint_zeek_c1222_read_write_service"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][c1222_read_write_service][chksum]",
                  "[zeek][c1222_read_write_service][count_m]",
                  "[zeek][c1222_read_write_service][data]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222_resolve_service") {
    fingerprint {
      id => "fingerprint_zeek_c1222_resolve_service"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][c1222_resolve_service][local_address]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222_service_error") {
    fingerprint {
      id => "fingerprint_zeek_c1222_service_error"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222_trace_service") {
    fingerprint {
      id => "fingerprint_zeek_c1222_trace_service"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][c1222][ap_title]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222_user_information") {
    fingerprint {
      id => "fingerprint_zeek_c1222_user_information"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][c1222_user_information][epsem_control]",
                  "[zeek][c1222_user_information][ed_class]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "c1222_wait_service") {
    fingerprint {
      id => "fingerprint_zeek_c1222_wait_service"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[zeek][c1222][req_resp]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][c1222_wait_service][time_s]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "cip") {
    fingerprint {
      id => "fingerprint_zeek_cip"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][cip][instance_id]",
                  "[zeek][cip][class_id]",
                  "[zeek][cip][packet_correlation_id]",
                  "[zeek][cip][cip_service_code]",
                  "[zeek][cip][cip_status_code]",
                  "[zeek][cip][direction]",
                  "[zeek][cip_io][cip_sequence_count]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "cip_io") {
    fingerprint {
      id => "fingerprint_zeek_cip_io"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][cip][packet_correlation_id]",
                  "[zeek][cip_io][connection_id]",
                  "[zeek][cip_io][sequence_number]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "dce_rpc") {
    fingerprint {
      id => "fingerprint_zeek_dce_rpc"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][dce_rpc][endpoint]",
                  "[zeek][dce_rpc][named_pipe]",
                  "[zeek][dce_rpc][rtt]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "dnp3_objects") {
    fingerprint {
      id => "fingerprint_zeek_dnp3_objects"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][dnp3_objects][object_count]",
                  "[zeek][dnp3_objects][object_type]",
                  "[zeek][dnp3_objects][range_high]",
                  "[zeek][dnp3_objects][range_low]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "dns") {
    fingerprint {
      id => "fingerprint_zeek_dns"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][dns][query]",
                  "[zeek][dns][answers]",
                  "[zeek][dns][trans_id]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "ecat_dev_info") {
    fingerprint {
      id => "fingerprint_zeek_ecat_dev_info"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][ecat_dev_info][build]",
                  "[zeek][ecat_dev_info][dev_type]",
                  "[zeek][ecat_dev_info][dpram]",
                  "[zeek][ecat_dev_info][features]",
                  "[zeek][ecat_dev_info][fmmucnt]",
                  "[zeek][ecat_dev_info][ports]",
                  "[zeek][ecat_dev_info][revision]",
                  "[zeek][ecat_dev_info][server_id]",
                  "[zeek][ecat_dev_info][smcount]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "ecat_registers") {
    fingerprint {
      id => "fingerprint_zeek_ecat_registers"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][ecat_registers][register_type]",
                  "[zeek][ecat_registers][register_addr]",
                  "[zeek][ecat_registers][server_addr]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "ecat_log_address") {
    fingerprint {
      id => "fingerprint_zeek_ecat_log_address"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][ecat_log_address][log_addr]",
                  "[zeek][ecat_log_address][length]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "ftp") {
    fingerprint {
      id => "fingerprint_zeek_ftp"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[related][user]",
                  "[zeek][ftp][arg]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "genisys") {
    fingerprint {
      id => "fingerprint_zeek_genisys"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][genisys][crc_calculated]",
                  "[zeek][genisys][server]",
                  "[zeek][genisys][direction]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "hart_ip") {
    fingerprint {
      id => "fingerprint_zeek_hart_ip"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][hart_ip][header_length]",
                  "[zeek][hart_ip][header_sequence_number]",
                  "[zeek][hart_ip][header_message_type_message_type]",
                  "[zeek][hart_ip][header_message_id]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "hart_ip_session_record") {
    fingerprint {
      id => "fingerprint_zeek_hart_ip_session_record"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][hart_ip_session_record][session_log_record_end_configuration_change_count]",
                  "[zeek][hart_ip_session_record][session_log_record_num_publish_pdu]",
                  "[zeek][hart_ip_session_record][session_log_record_num_request_pdu]",
                  "[zeek][hart_ip_session_record][session_log_record_num_response_pdu]",
                  "[zeek][hart_ip_session_record][session_log_record_session_status_summary_aborted_session]",
                  "[zeek][hart_ip_session_record][session_log_record_session_status_summary_bad_session_initialization]",
                  "[zeek][hart_ip_session_record][session_log_record_session_status_summary_insecure_session]",
                  "[zeek][hart_ip_session_record][session_log_record_session_status_summary_session_timeout]",
                  "[zeek][hart_ip_session_record][session_log_record_session_status_summary_undefined_bits]",
                  "[zeek][hart_ip_session_record][session_log_record_session_status_summary_writes_occured]",
                  "[zeek][hart_ip_session_record][session_log_record_start_configuration_change_count]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "http") {
    fingerprint {
      id => "fingerprint_zeek_http"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[url][full]",
                  "[user_agent][original]",
                  "[related][hash]",
                  "[zeek][http][resp_mime_types]",
                  "[zeek][http][trans_depth]",
                  "[zeek][http][client_header_names]",
                  "[zeek][http][server_header_names]",
                  "[totDataBytes]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "ja4ssh") {
    fingerprint {
      id => "fingerprint_zeek_ja4ssh"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[related][hash]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "modbus") {
    fingerprint {
      id => "fingerprint_zeek_modbus"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][modbus][network_direction]",
                  "[zeek][modbus][trans_id]",
                  "[zeek][modbus][unit_id]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "modbus_detailed") {
    fingerprint {
      id => "fingerprint_zeek_modbus_detailed"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][modbus][trans_id]",
                  "[zeek][modbus][unit_id]",
                  "[zeek][modbus_detailed][address]",
                  "[zeek][modbus_detailed][quantity]",
                  "[zeek][modbus_detailed][request_values]",
                  "[zeek][modbus_detailed][response_values]",
                  "[zeek][modbus_detailed][matched]",
                  "[zeek][modbus_detailed][request_subfunction_code]",
                  "[zeek][modbus_detailed][response_subfunction_code]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "modbus_mask_write_register") {
    fingerprint {
      id => "fingerprint_zeek_modbus_mask_write_register"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][modbus][network_direction]",
                  "[zeek][modbus][trans_id]",
                  "[zeek][modbus][unit_id]",
                  "[zeek][modbus_detailed][address]",
                  "[zeek][modbus_mask_write_register][and_mask]",
                  "[zeek][modbus_mask_write_register][or_mask]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "modbus_read_device_identification") {
    fingerprint {
      id => "fingerprint_zeek_modbus_read_device_identification"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][modbus][network_direction]",
                  "[zeek][modbus][trans_id]",
                  "[zeek][modbus][unit_id]",
                  "[zeek][modbus_read_device_identification][device_id_code]",
                  "[zeek][modbus_read_device_identification][object_id]",
                  "[zeek][modbus_read_device_identification][object_id_code]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "modbus_read_write_multiple_registers") {
    fingerprint {
      id => "fingerprint_zeek_modbus_read_write_multiple_registers"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][modbus][network_direction]",
                  "[zeek][modbus][trans_id]",
                  "[zeek][modbus][unit_id]",
                  "[zeek][modbus_read_write_multiple_registers][read_start_address]",
                  "[zeek][modbus_read_write_multiple_registers][read_quantity]",
                  "[zeek][modbus_read_write_multiple_registers][read_registers]",
                  "[zeek][modbus_read_write_multiple_registers][write_start_address]",
                  "[zeek][modbus_read_write_multiple_registers][write_registers]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "ocsp") {
    fingerprint {
      id => "fingerprint_zeek_ocsp"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][ocsp][issuerKeyHash]",
                  "[zeek][ocsp][issuerNameHash]",
                  "[zeek][ocsp][serialNumber]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "omron_fins_data_link_status_read") {
    fingerprint {
      id => "fingerprint_zeek_omron_fins_data_link_status_read"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][omron_fins][icf_data_type]",
                  "[zeek][omron_fins_data_link_status_read][master_node_number]",
                  "[zeek][omron_fins_data_link_status_read][node_number]",
                  "[zeek][omron_fins_data_link_status_read][data_links]",
                  "[zeek][omron_fins_data_link_status_read][mode_status]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "omron_fins_detail") {
    fingerprint {
      id => "fingerprint_zeek_omron_fins_detail"
      # O_O
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][omron_fins][day]",
                  "[zeek][omron_fins][hour]",
                  "[zeek][omron_fins][icf_data_type]",
                  "[zeek][omron_fins][link_id]",
                  "[zeek][omron_fins][minute]",
                  "[zeek][omron_fins][month]",
                  "[zeek][omron_fins][response_code]",
                  "[zeek][omron_fins][second]",
                  "[zeek][omron_fins][year]",
                  "[zeek][omron_fins_detail][acquire_network_address]",
                  "[zeek][omron_fins_detail][acquire_node_number]",
                  "[zeek][omron_fins_detail][acquire_unit_address]",
                  "[zeek][omron_fins_detail][average_cycle_time]",
                  "[zeek][omron_fins_detail][beginning_address]",
                  "[zeek][omron_fins_detail][beginning_word]",
                  "[zeek][omron_fins_detail][bit_flag]",
                  "[zeek][omron_fins_detail][block_record_cio_area_first_word]",
                  "[zeek][omron_fins_detail][block_record_data_link_status]",
                  "[zeek][omron_fins_detail][block_record_dm_area_first_word]",
                  "[zeek][omron_fins_detail][block_record_kind_of_dm]",
                  "[zeek][omron_fins_detail][block_record_node_num]",
                  "[zeek][omron_fins_detail][block_record_num_of_link_nodes]",
                  "[zeek][omron_fins_detail][block_record_num_of_total_words]",
                  "[zeek][omron_fins_detail][built_in_host_interface]",
                  "[zeek][omron_fins_detail][clear_code]",
                  "[zeek][omron_fins_detail][clock_time]",
                  "[zeek][omron_fins_detail][command]",
                  "[zeek][omron_fins_detail][controller_data_to_read]",
                  "[zeek][omron_fins_detail][controller_model]",
                  "[zeek][omron_fins_detail][controller_status_data_read_mode]",
                  "[zeek][omron_fins_detail][controller_status_data_read_status]",
                  "[zeek][omron_fins_detail][controller_version]",
                  "[zeek][omron_fins_detail][cpu_bus_unit_config]",
                  "[zeek][omron_fins_detail][cycle_time_read_parameter]",
                  "[zeek][omron_fins_detail][data]",
                  "[zeek][omron_fins_detail][data_length]",
                  "[zeek][omron_fins_detail][date]",
                  "[zeek][omron_fins_detail][error_message]",
                  "[zeek][omron_fins_detail][expansion_dm_size]",
                  "[zeek][omron_fins_detail][fal_fals_0]",
                  "[zeek][omron_fins_detail][fal_fals_10]",
                  "[zeek][omron_fins_detail][fal_fals_11]",
                  "[zeek][omron_fins_detail][fal_fals_12]",
                  "[zeek][omron_fins_detail][fal_fals_13]",
                  "[zeek][omron_fins_detail][fal_fals_1]",
                  "[zeek][omron_fins_detail][fal_fals_2]",
                  "[zeek][omron_fins_detail][fal_fals_3]",
                  "[zeek][omron_fins_detail][fal_fals_4]",
                  "[zeek][omron_fins_detail][fal_fals_5]",
                  "[zeek][omron_fins_detail][fal_fals_6]",
                  "[zeek][omron_fins_detail][fal_fals_7]",
                  "[zeek][omron_fins_detail][fal_fals_8]",
                  "[zeek][omron_fins_detail][fal_fals_9]",
                  "[zeek][omron_fins_detail][fal_fals_no]",
                  "[zeek][omron_fins_detail][fal_fals_no_0]",
                  "[zeek][omron_fins_detail][fal_fals_no_10]",
                  "[zeek][omron_fins_detail][fal_fals_no_11]",
                  "[zeek][omron_fins_detail][fal_fals_no_12]",
                  "[zeek][omron_fins_detail][fal_fals_no_13]",
                  "[zeek][omron_fins_detail][fal_fals_no_1]",
                  "[zeek][omron_fins_detail][fal_fals_no_2]",
                  "[zeek][omron_fins_detail][fal_fals_no_3]",
                  "[zeek][omron_fins_detail][fal_fals_no_4]",
                  "[zeek][omron_fins_detail][fal_fals_no_5]",
                  "[zeek][omron_fins_detail][fal_fals_no_6]",
                  "[zeek][omron_fins_detail][fal_fals_no_7]",
                  "[zeek][omron_fins_detail][fal_fals_no_8]",
                  "[zeek][omron_fins_detail][fal_fals_no_9]",
                  "[zeek][omron_fins_detail][fatal_error]",
                  "[zeek][omron_fins_detail][first_word]",
                  "[zeek][omron_fins_detail][for_system_use]",
                  "[zeek][omron_fins_detail][icf_data_type]",
                  "[zeek][omron_fins_detail][intelligent_id_no]",
                  "[zeek][omron_fins_detail][iom_size]",
                  "[zeek][omron_fins_detail][kind_of_memory_card]",
                  "[zeek][omron_fins_detail][last_word]",
                  "[zeek][omron_fins_detail][last_word_bit]",
                  "[zeek][omron_fins_detail][max_cycle_time]",
                  "[zeek][omron_fins_detail][memory_area_code]",
                  "[zeek][omron_fins_detail][memory_card_size]",
                  "[zeek][omron_fins_detail][message_0]",
                  "[zeek][omron_fins_detail][message_1]",
                  "[zeek][omron_fins_detail][message_2]",
                  "[zeek][omron_fins_detail][message_3]",
                  "[zeek][omron_fins_detail][message_4]",
                  "[zeek][omron_fins_detail][message_5]",
                  "[zeek][omron_fins_detail][message_6]",
                  "[zeek][omron_fins_detail][message_7]",
                  "[zeek][omron_fins_detail][message_no_0]",
                  "[zeek][omron_fins_detail][message_no_1]",
                  "[zeek][omron_fins_detail][message_no_2]",
                  "[zeek][omron_fins_detail][message_no_3]",
                  "[zeek][omron_fins_detail][message_no_4]",
                  "[zeek][omron_fins_detail][message_no_5]",
                  "[zeek][omron_fins_detail][message_no_6]",
                  "[zeek][omron_fins_detail][message_no_7]",
                  "[zeek][omron_fins_detail][message_yes_no]",
                  "[zeek][omron_fins_detail][min_cycle_time]",
                  "[zeek][omron_fins_detail][model_number]",
                  "[zeek][omron_fins_detail][no_of_bits]",
                  "[zeek][omron_fins_detail][no_of_dm_words]",
                  "[zeek][omron_fins_detail][no_of_racks_connected]",
                  "[zeek][omron_fins_detail][no_of_steps_transitions]",
                  "[zeek][omron_fins_detail][no_of_sysmac_bus2_master_mounted]",
                  "[zeek][omron_fins_detail][no_of_sysmac_bus_master_mounted]",
                  "[zeek][omron_fins_detail][no_of_units]",
                  "[zeek][omron_fins_detail][non_fatal_error]",
                  "[zeek][omron_fins_detail][num_of_link_nodes]",
                  "[zeek][omron_fins_detail][number_of_bytes]",
                  "[zeek][omron_fins_detail][number_of_items]",
                  "[zeek][omron_fins_detail][number_of_receptions]",
                  "[zeek][omron_fins_detail][number_of_words]",
                  "[zeek][omron_fins_detail][parameter_area_code]",
                  "[zeek][omron_fins_detail][password]",
                  "[zeek][omron_fins_detail][peripheral_device_connected]",
                  "[zeek][omron_fins_detail][program_area_size]",
                  "[zeek][omron_fins_detail][program_no]",
                  "[zeek][omron_fins_detail][protect_code]",
                  "[zeek][omron_fins_detail][read_length]",
                  "[zeek][omron_fins_detail][response_code]",
                  "[zeek][omron_fins_detail][run_mode]",
                  "[zeek][omron_fins_detail][set_reset_specification]",
                  "[zeek][omron_fins_detail][test_data]",
                  "[zeek][omron_fins_detail][timer_size]",
                  "[zeek][omron_fins_detail][unit_address]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "omron_fins_network_status_read") {
    fingerprint {
      id => "fingerprint_zeek_omron_fins_network_status_read"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][omron_fins][link_id]",
                  "[zeek][omron_fins_network_status_read][communication_cycle_time]",
                  "[zeek][omron_fins_network_status_read][current_polling_node_number]",
                  "[zeek][omron_fins_network_status_read][cyclic_error_count]",
                  "[zeek][omron_fins_network_status_read][cyclic_operation]",
                  "[zeek][omron_fins_network_status_read][cyclic_transmission_status]",
                  "[zeek][omron_fins_network_status_read][in_network]",
                  "[zeek][omron_fins_network_status_read][in_network]",
                  "[zeek][omron_fins_network_status_read][non_fatal_error]",
                  "[zeek][omron_fins_network_status_read][polling]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "opcua_binary") {
    fingerprint {
      id => "fingerprint_zeek_opcua_binary"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][opcua_binary][req_identifier]",
                  "[zeek][opcua_binary][req_hdr_node_id_guid]",
                  "[zeek][opcua_binary][req_hdr_request_handle]",
                  "[zeek][opcua_binary][res_hdr_request_handle]",
                  "[zeek][opcua_binary][request_id]",
                  "[zeek][opcua_binary][req_seq_number]",
                  "[zeek][opcua_binary][res_seq_number]",
                  "[zeek][opcua_binary][sec_channel_id]",
                  "[zeek][opcua_binary][sec_channel_id]",
                  "[zeek][opcua_binary][total_size]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "opcua_binary_browse_response_references") {
    fingerprint {
      id => "fingerprint_zeek_opcua_binary_browse_response_references"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_display_name_locale]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_display_name_mask]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_display_name_text]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_is_forward]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_node_class]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_ref_encoding_mask]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_ref_name]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_ref_numeric]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_ref_type_encoding_mask]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_ref_type_namespace_idx]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_ref_type_numeric]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_type_def_encoding_mask]",
                  "[zeek][opcua_binary_browse_response_references][browse_response_type_def_numeric]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "opcua_binary_read_nodes_to_read") {
    fingerprint {
      id => "fingerprint_zeek_opcua_binary_read_nodes_to_read"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][opcua_binary_read_nodes_to_read][attribute_id]",
                  "[zeek][opcua_binary_read_nodes_to_read][data_encoding_name_idx]",
                  "[zeek][opcua_binary_read_nodes_to_read][node_id_encoding_mask]",
                  "[zeek][opcua_binary_read_nodes_to_read][node_id_namespace_idx]",
                  "[zeek][opcua_binary_read_nodes_to_read][node_id_string]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "opcua_binary_read_results") {
    fingerprint {
      id => "fingerprint_zeek_opcua_binary_read_results"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][opcua_binary_read_results][data_value_encoding_mask]",
                  "[zeek][opcua_binary_read_results][level]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "opcua_binary_diag_info_detail") {
    fingerprint {
      id => "fingerprint_zeek_opcua_binary_diag_info_detail"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][opcua_binary_diag_info_detail][has_addl_info]",
                  "[zeek][opcua_binary_diag_info_detail][has_inner_diag_info]",
                  "[zeek][opcua_binary_diag_info_detail][has_inner_stat_code]",
                  "[zeek][opcua_binary_diag_info_detail][has_locale]",
                  "[zeek][opcua_binary_diag_info_detail][has_namespace_uri]",
                  "[zeek][opcua_binary_diag_info_detail][has_symbolic_id]",
                  "[zeek][opcua_binary_diag_info_detail][inner_diag_level]",
                  "[zeek][opcua_binary_diag_info_detail][inner_stat_code]",
                  "[zeek][opcua_binary_diag_info_detail][source]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "opcua_binary_variant_array_dims") {
    fingerprint {
      id => "fingerprint_zeek_opcua_binary_variant_array_dims"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][opcua_binary_variant_array_dims][dimension]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "opcua_binary_status_code_detail") {
    fingerprint {
      id => "fingerprint_zeek_opcua_binary_status_code_detail"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][opcua_binary_status_code_detail][info_type]",
                  "[zeek][opcua_binary_status_code_detail][semantics_changed]",
                  "[zeek][opcua_binary_status_code_detail][severity]",
                  "[zeek][opcua_binary_status_code_detail][source]",
                  "[zeek][opcua_binary_status_code_detail][source_level]",
                  "[zeek][opcua_binary_status_code_detail][status_code]",
                  "[zeek][opcua_binary_status_code_detail][sub_code]",
                  "[zeek][opcua_binary_status_code_detail][structure_changed]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "opcua_binary_variant_data") {
    fingerprint {
      id => "fingerprint_zeek_opcua_binary_variant_data"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][opcua_binary_variant_data][variant_data_value_signed_numeric]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "opcua_binary_variant_metadata") {
    fingerprint {
      id => "fingerprint_zeek_opcua_binary_variant_metadata"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][opcua_binary_variant_metadata][built_in_data_type]",
                  "[zeek][opcua_binary_variant_metadata][dara_variant_encoding_mask]",
                  "[zeek][opcua_binary_variant_metadata][data_variant_data_type]",
                  "[zeek][opcua_binary_variant_metadata][variant_data_source]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "ospf") {
    fingerprint {
      id => "fingerprint_zeek_ospf"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[related][user]",
                  "[zeek][ospf][lsa_type]",
                  "[zeek][ospf][metric]",
                  "[zeek][ospf][advert_router]",
                  "[zeek][ospf][area_id]",
                  "[zeek][ospf][link_state_id]",
                  "[zeek][ospf][ospf_type]",
                  "[zeek][ospf][prefix]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "postgresql") {
    fingerprint {
      id => "fingerprint_zeek_postgresql"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[related][user]",
                  "[zeek][postgresql][database]",
                  "[zeek][postgresql][rows]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "smb_cmd") {
    fingerprint {
      id => "fingerprint_zeek_smb_cmd"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][smb_cmd][rtt]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "smb_files") {
    fingerprint {
      id => "fingerprint_zeek_smb_files"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[file][path]",
                  "[zeek][smb_files][data_len_req]",
                  "[zeek][smb_files][data_len_rsp]",
                  "[zeek][smb_files][data_offset_req]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "software") {
    fingerprint {
      id => "fingerprint_zeek_software"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][software][software_type]",
                  "[zeek][software][name]",
                  "[zeek][software][unparsed_version]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "synchrophasor_data_detail") {
    fingerprint {
      id => "fingerprint_zeek_synchrophasor_data_detail"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][synchrophasor][frame_type]",
                  "[zeek][synchrophasor_data_detail][data_frame_id]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else if ([event][dataset] == "syslog") {
    fingerprint {
      id => "fingerprint_zeek_syslog"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[zeek][syslog][facility]",
                  "[zeek][syslog][severity]",
                  "[zeek][syslog][message]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }

  } else {
    fingerprint {
      id => "fingerprint_zeek_event"
      source => [ "[event][provider]",
                  "[event][dataset]",
                  "[zeek][ts]",
                  "[source][ip]",
                  "[source][port]",
                  "[destination][ip]",
                  "[destination][port]",
                  "[event][action]",
                  "[event][result]",
                  "[totDataBytes]",
                  "[related][hash]",
                  "[rule][name]",
                  "[rule][category]" ]
      concatenate_sources => true
      # uses event.hash
      ecs_compatibility => "v8"
      method => "MURMUR3_128"
      base64encode => true
    }
  }

}