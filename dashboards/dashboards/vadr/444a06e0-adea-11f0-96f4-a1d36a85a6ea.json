{
  "objects": [
    {
      "attributes": {
        "description": "",
        "hits": 0,
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"query\":{\"language\":\"kuery\",\"query\":\"\"},\"filter\":[]}"
        },
        "optionsJSON": "{\"hidePanelTitles\":false,\"useMargins\":true}",
        "panelsJSON": "[{\"version\":\"3.2.0\",\"gridData\":{\"x\":0,\"y\":0,\"w\":6,\"h\":29,\"i\":\"f9b8ad97-a25d-443a-b5d9-2b2a4b8325cf\"},\"panelIndex\":\"f9b8ad97-a25d-443a-b5d9-2b2a4b8325cf\",\"embeddableConfig\":{},\"panelRefName\":\"panel_0\"},{\"version\":\"3.2.0\",\"gridData\":{\"x\":6,\"y\":0,\"w\":9,\"h\":14,\"i\":\"2207aa3d-45e8-40d7-bc51-58b6a4750956\"},\"panelIndex\":\"2207aa3d-45e8-40d7-bc51-58b6a4750956\",\"embeddableConfig\":{},\"panelRefName\":\"panel_1\"},{\"version\":\"3.2.0\",\"gridData\":{\"x\":15,\"y\":0,\"w\":33,\"h\":14,\"i\":\"a8508400-9f8d-4217-978a-6850200d9a5c\"},\"panelIndex\":\"a8508400-9f8d-4217-978a-6850200d9a5c\",\"embeddableConfig\":{},\"panelRefName\":\"panel_2\"},{\"version\":\"3.2.0\",\"gridData\":{\"x\":6,\"y\":14,\"w\":18,\"h\":15,\"i\":\"911976b1-65c0-4f02-9504-36da67a729a8\"},\"panelIndex\":\"911976b1-65c0-4f02-9504-36da67a729a8\",\"embeddableConfig\":{},\"panelRefName\":\"panel_3\"},{\"version\":\"3.2.0\",\"gridData\":{\"x\":24,\"y\":14,\"w\":24,\"h\":15,\"i\":\"b943ce16-6a56-42f9-95ab-6570ef3722b9\"},\"panelIndex\":\"b943ce16-6a56-42f9-95ab-6570ef3722b9\",\"embeddableConfig\":{},\"panelRefName\":\"panel_4\"},{\"version\":\"3.2.0\",\"gridData\":{\"x\":0,\"y\":29,\"w\":24,\"h\":15,\"i\":\"b7192416-c33f-4e02-914c-ef79775a17de\"},\"panelIndex\":\"b7192416-c33f-4e02-914c-ef79775a17de\",\"embeddableConfig\":{},\"panelRefName\":\"panel_5\"},{\"version\":\"3.2.0\",\"gridData\":{\"x\":24,\"y\":29,\"w\":24,\"h\":15,\"i\":\"daa9c393-967c-428f-b08e-643749d7246f\"},\"panelIndex\":\"daa9c393-967c-428f-b08e-643749d7246f\",\"embeddableConfig\":{},\"panelRefName\":\"panel_6\"},{\"version\":\"3.2.0\",\"gridData\":{\"x\":0,\"y\":44,\"w\":48,\"h\":26,\"i\":\"5b38e212-311b-4297-9a08-c311ef749728\"},\"panelIndex\":\"5b38e212-311b-4297-9a08-c311ef749728\",\"embeddableConfig\":{},\"panelRefName\":\"panel_7\"},{\"version\":\"3.2.0\",\"gridData\":{\"x\":0,\"y\":70,\"w\":48,\"h\":14,\"i\":\"041d84e3-0ba8-4b0d-83a2-670ac0556f89\"},\"panelIndex\":\"041d84e3-0ba8-4b0d-83a2-670ac0556f89\",\"embeddableConfig\":{},\"panelRefName\":\"panel_8\"}]",
        "timeRestore": false,
        "title": "VADR - NTP",
        "version": 1
      },
      "id": "444a06e0-adea-11f0-96f4-a1d36a85a6ea",
      "migrationVersion": {
        "dashboard": "7.9.3"
      },
      "namespaces": [
        "default"
      ],
      "references": [
        {
          "id": "4fdd16a0-3334-11ef-94c9-09db3014d49a",
          "name": "panel_0",
          "type": "visualization"
        },
        {
          "id": "d0e56b00-eeb8-11e9-bdef-65a192b7f586",
          "name": "panel_1",
          "type": "visualization"
        },
        {
          "id": "24850a90-eeb9-11e9-bdef-65a192b7f586",
          "name": "panel_2",
          "type": "visualization"
        },
        {
          "id": "1c6cf390-eebe-11e9-bdef-65a192b7f586",
          "name": "panel_3",
          "type": "visualization"
        },
        {
          "id": "089c9ff0-eebe-11e9-bdef-65a192b7f586",
          "name": "panel_4",
          "type": "visualization"
        },
        {
          "id": "6ba97b90-eec8-11e9-acf8-c715d8d1900e",
          "name": "panel_5",
          "type": "visualization"
        },
        {
          "id": "9050b8f0-eec8-11e9-acf8-c715d8d1900e",
          "name": "panel_6",
          "type": "visualization"
        },
        {
          "id": "f805d650-adea-11f0-96f4-a1d36a85a6ea",
          "name": "panel_7",
          "type": "visualization"
        },
        {
          "id": "eeb31a60-fc37-11ee-a696-1ddfa039ab2d",
          "name": "panel_8",
          "type": "visualization"
        }
      ],
      "type": "dashboard",
      "updated_at": "2025-10-20T19:29:11.715Z",
      "version": "WzE2MTMsMV0="
    },
    {
      "attributes": {
        "description": "",
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"query\":{\"query\":{\"query_string\":{\"query\":\"*\"}},\"language\":\"lucene\"},\"filter\":[]}"
        },
        "title": "VADR Network Logs",
        "uiStateJSON": "{}",
        "version": 1,
        "visState": "{\"title\":\"VADR Network Logs\",\"type\":\"markdown\",\"aggs\":[],\"params\":{\"markdown\":\"### VADR Toolkit  \\n[Inventory](#/dashboard/d16105d0-2b75-11f0-92dc-5f54cacd4f4e)   \\n[Misconfigurations](#dashboard/f75511b0-2b79-11f0-92dc-5f54cacd4f4e)   \\n[Outdated/Insecure Services](#/dashboard/62ac0aa0-2b9c-11f0-bb82-8ffd215e5a91)  \\n[Remote Access](#/dashboard/985cb6a0-2ba0-11f0-bb82-8ffd215e5a91)    \\n[External Communications](#/dashboard/5cd4b680-2b8e-11f0-92dc-5f54cacd4f4e)   \\n[Domain Queries](#/dashboard/82e4ebe0-2d11-11f0-af4f-052f357bea07)     \\n[Network Time Protocol](#/dashboard/444a06e0-adea-11f0-96f4-a1d36a85a6ea)     \\n[Intrusion Detection Alerts](#/dashboard/8444dee0-3023-11f0-af4f-052f357bea07)     \\n[Segment Examiner](#/dashboard/0f52b420-9e08-11ef-8358-f36ccc4ae837)     \\n[Sankey Tool](#/dashboard/0fb588c0-2d0f-11f0-af4f-052f357bea07)     \\n[Force Directed Tool - Beta](#/dashboard/ac8b32c0-be66-11ef-9ff5-ff2a2927176e)     \\n[NAVV](#/dashboard/11cd7300-fc34-11ee-a696-1ddfa039ab2d)    \\n[Legacy Analysis](#/dashboard/590fcc10-fe8f-11ee-99f0-3db6323f1fae)    \\n\\nMALCOLM_NAVIGATION_MARKDOWN_REPLACER\",\"type\":\"markdown\",\"fontSize\":10,\"openLinksInNewTab\":false}}"
      },
      "id": "4fdd16a0-3334-11ef-94c9-09db3014d49a",
      "migrationVersion": {
        "visualization": "7.10.0"
      },
      "namespaces": [
        "default"
      ],
      "references": [],
      "type": "visualization",
      "updated_at": "2025-10-20T19:25:34.461Z",
      "version": "WzE2MTEsMV0="
    },
    {
      "attributes": {
        "description": "",
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"lucene\"},\"filter\":[]}"
        },
        "savedSearchRefName": "search_0",
        "title": "NTP - Log Count",
        "uiStateJSON": "{}",
        "version": 1,
        "visState": "{\"title\":\"NTP - Log Count\",\"type\":\"metric\",\"params\":{\"addTooltip\":true,\"addLegend\":false,\"type\":\"metric\",\"metric\":{\"percentageMode\":false,\"useRanges\":false,\"colorSchema\":\"Green to Red\",\"metricColorMode\":\"None\",\"colorsRange\":[{\"from\":0,\"to\":10000}],\"labels\":{\"show\":false},\"invertColors\":false,\"style\":{\"bgFill\":\"#000\",\"bgColor\":false,\"labelColor\":false,\"subText\":\"\",\"fontSize\":36}}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}}]}"
      },
      "id": "d0e56b00-eeb8-11e9-bdef-65a192b7f586",
      "migrationVersion": {
        "visualization": "7.10.0"
      },
      "namespaces": [
        "default"
      ],
      "references": [
        {
          "id": "e8699550-eeac-11e9-bdef-65a192b7f586",
          "name": "search_0",
          "type": "search"
        }
      ],
      "type": "visualization",
      "updated_at": "2025-09-30T16:38:47.045Z",
      "version": "WzE0NSwxXQ=="
    },
    {
      "attributes": {
        "description": "",
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"lucene\"},\"filter\":[]}"
        },
        "savedSearchRefName": "search_0",
        "title": "NTP - Log Count Over Time",
        "uiStateJSON": "{\"vis\":{\"legendOpen\":false}}",
        "version": 1,
        "visState": "{\"title\":\"NTP - Log Count Over Time\",\"type\":\"histogram\",\"params\":{\"type\":\"histogram\",\"grid\":{\"categoryLines\":false,\"style\":{\"color\":\"#eee\"}},\"categoryAxes\":[{\"id\":\"CategoryAxis-1\",\"type\":\"category\",\"position\":\"bottom\",\"show\":true,\"style\":{},\"scale\":{\"type\":\"linear\"},\"labels\":{\"show\":true,\"truncate\":100},\"title\":{}}],\"valueAxes\":[{\"id\":\"ValueAxis-1\",\"name\":\"LeftAxis-1\",\"type\":\"value\",\"position\":\"left\",\"show\":true,\"style\":{},\"scale\":{\"type\":\"linear\",\"mode\":\"normal\"},\"labels\":{\"show\":true,\"rotate\":0,\"filter\":false,\"truncate\":100},\"title\":{\"text\":\"\"}}],\"seriesParams\":[{\"show\":\"true\",\"type\":\"histogram\",\"mode\":\"stacked\",\"data\":{\"label\":\"Count\",\"id\":\"1\"},\"valueAxis\":\"ValueAxis-1\",\"drawLinesBetweenPoints\":true,\"showCircles\":true}],\"addTooltip\":true,\"addLegend\":true,\"legendPosition\":\"right\",\"times\":[],\"addTimeMarker\":false},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"date_histogram\",\"schema\":\"segment\",\"params\":{\"field\":\"MALCOLM_NETWORK_INDEX_TIME_FIELD_REPLACER\",\"useNormalizedEsInterval\":true,\"interval\":\"auto\",\"drop_partials\":false,\"min_doc_count\":1,\"extended_bounds\":{},\"customLabel\":\" \"}},{\"id\":\"3\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"group\",\"params\":{\"field\":\"zeek.ntp.version\",\"size\":10,\"order\":\"desc\",\"orderBy\":\"1\",\"otherBucket\":true,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"NTP Version\"}}]}"
      },
      "id": "24850a90-eeb9-11e9-bdef-65a192b7f586",
      "migrationVersion": {
        "visualization": "7.10.0"
      },
      "namespaces": [
        "default"
      ],
      "references": [
        {
          "id": "e8699550-eeac-11e9-bdef-65a192b7f586",
          "name": "search_0",
          "type": "search"
        }
      ],
      "type": "visualization",
      "updated_at": "2025-09-30T16:38:47.045Z",
      "version": "WzE0NiwxXQ=="
    },
    {
      "attributes": {
        "description": "",
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"lucene\"},\"filter\":[]}"
        },
        "savedSearchRefName": "search_0",
        "title": "NTP - Version",
        "uiStateJSON": "{}",
        "version": 1,
        "visState": "{\"title\":\"NTP - Version\",\"type\":\"pie\",\"params\":{\"type\":\"pie\",\"addTooltip\":true,\"addLegend\":true,\"legendPosition\":\"bottom\",\"isDonut\":true,\"labels\":{\"show\":false,\"values\":true,\"last_level\":true,\"truncate\":100}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"segment\",\"params\":{\"field\":\"zeek.ntp.version\",\"size\":10,\"order\":\"desc\",\"orderBy\":\"1\",\"otherBucket\":true,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Unknown\",\"customLabel\":\"NTP Version\"}}]}"
      },
      "id": "1c6cf390-eebe-11e9-bdef-65a192b7f586",
      "migrationVersion": {
        "visualization": "7.10.0"
      },
      "namespaces": [
        "default"
      ],
      "references": [
        {
          "id": "e8699550-eeac-11e9-bdef-65a192b7f586",
          "name": "search_0",
          "type": "search"
        }
      ],
      "type": "visualization",
      "updated_at": "2025-09-30T16:38:47.045Z",
      "version": "WzE0OCwxXQ=="
    },
    {
      "attributes": {
        "description": "",
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"lucene\"},\"filter\":[]}"
        },
        "savedSearchRefName": "search_0",
        "title": "NTP - Mode",
        "uiStateJSON": "{}",
        "version": 1,
        "visState": "{\"title\":\"NTP - Mode\",\"type\":\"pie\",\"params\":{\"type\":\"pie\",\"addTooltip\":true,\"addLegend\":true,\"legendPosition\":\"bottom\",\"isDonut\":true,\"labels\":{\"show\":false,\"values\":true,\"last_level\":true,\"truncate\":100}},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"segment\",\"params\":{\"field\":\"zeek.ntp.mode_str\",\"size\":5,\"order\":\"desc\",\"orderBy\":\"1\",\"otherBucket\":true,\"otherBucketLabel\":\"Other\",\"missingBucket\":true,\"missingBucketLabel\":\"Unknown\",\"customLabel\":\"NTP Mode\"}}]}"
      },
      "id": "089c9ff0-eebe-11e9-bdef-65a192b7f586",
      "migrationVersion": {
        "visualization": "7.10.0"
      },
      "namespaces": [
        "default"
      ],
      "references": [
        {
          "id": "e8699550-eeac-11e9-bdef-65a192b7f586",
          "name": "search_0",
          "type": "search"
        }
      ],
      "type": "visualization",
      "updated_at": "2025-09-30T16:38:47.045Z",
      "version": "WzE0OSwxXQ=="
    },
    {
      "attributes": {
        "description": "",
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"lucene\"},\"filter\":[]}"
        },
        "savedSearchRefName": "search_0",
        "title": "NTP - Source IP",
        "uiStateJSON": "{\"vis\":{\"params\":{\"sort\":{\"columnIndex\":2,\"direction\":\"desc\"}}}}",
        "version": 1,
        "visState": "{\"title\":\"NTP - Source IP\",\"type\":\"table\",\"params\":{\"perPage\":10,\"showPartialRows\":false,\"showMetricsAtAllLevels\":false,\"sort\":{\"columnIndex\":null,\"direction\":null},\"showTotal\":false,\"totalFunc\":\"sum\"},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"bucket\",\"params\":{\"field\":\"source.ip\",\"size\":100,\"order\":\"desc\",\"orderBy\":\"1\",\"otherBucket\":true,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Source IP\"}}]}"
      },
      "id": "6ba97b90-eec8-11e9-acf8-c715d8d1900e",
      "migrationVersion": {
        "visualization": "7.10.0"
      },
      "namespaces": [
        "default"
      ],
      "references": [
        {
          "id": "e8699550-eeac-11e9-bdef-65a192b7f586",
          "name": "search_0",
          "type": "search"
        }
      ],
      "type": "visualization",
      "updated_at": "2025-09-30T16:38:47.045Z",
      "version": "WzE1MSwxXQ=="
    },
    {
      "attributes": {
        "description": "",
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"lucene\"},\"filter\":[]}"
        },
        "savedSearchRefName": "search_0",
        "title": "NTP - Destination IP",
        "uiStateJSON": "{\"vis\":{\"params\":{\"sort\":{\"columnIndex\":2,\"direction\":\"desc\"}}}}",
        "version": 1,
        "visState": "{\"title\":\"NTP - Destination IP\",\"type\":\"table\",\"params\":{\"perPage\":10,\"showPartialRows\":false,\"showMetricsAtAllLevels\":false,\"sort\":{\"columnIndex\":null,\"direction\":null},\"showTotal\":false,\"totalFunc\":\"sum\"},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"schema\":\"metric\",\"params\":{}},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"bucket\",\"params\":{\"field\":\"destination.ip\",\"size\":100,\"order\":\"desc\",\"orderBy\":\"1\",\"otherBucket\":true,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Destination IP\"}},{\"id\":\"3\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"bucket\",\"params\":{\"field\":\"destination.port\",\"size\":100,\"order\":\"desc\",\"orderBy\":\"1\",\"otherBucket\":true,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Destination Port\"}}]}"
      },
      "id": "9050b8f0-eec8-11e9-acf8-c715d8d1900e",
      "migrationVersion": {
        "visualization": "7.10.0"
      },
      "namespaces": [
        "default"
      ],
      "references": [
        {
          "id": "e8699550-eeac-11e9-bdef-65a192b7f586",
          "name": "search_0",
          "type": "search"
        }
      ],
      "type": "visualization",
      "updated_at": "2025-09-30T16:38:47.045Z",
      "version": "WzE1MiwxXQ=="
    },
    {
      "attributes": {
        "description": "",
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"
        },
        "title": "VADR - NTP Force Directed",
        "uiStateJSON": "{}",
        "version": 1,
        "visState": "{\"title\":\"VADR - NTP Force Directed\",\"type\":\"vega\",\"aggs\":[],\"params\":{\"spec\":\"## Force-Directed Graph for Network Analysis - DNS Filtering\\n## Purpose: To showcase connections between ipv4 addresses within a time period and highlight different roles as assigned by each IP\\n## Author: Mackenzie Zappe \\n## Last updated: 10/15/2025\\n\\n## Main feature update in this version: \\n##  -- Changed source files to look at NTP logs only \\n\\n{\\n##  Set up Vega specification definitions\\n##  Pay attention to Vega additions after V5 \\n  \\\"$schema\\\": \\\"https://vega.github.io/schema/vega/v5.json\\\",\\n  \\\"description\\\": \\\"Force-Directed Network Graph with data from Malcolm\\\",\\n  \\\"autosize\\\": \\\"fit\\\",\\n  \\\"background\\\": \\\"#5F8080\\\",\\n##  --------------------------------------------------------------------------------------------------------------------------\\n##  SECTION 0: Config --------------------------------------------------------------------------------------------------------\\n##  Define Specification constants like multiple legend positioning\\n##  - arguments set in Config WILL be overwritten if redefined later in specification\\n  \\\"config\\\":{\\n      \\\"legend\\\": {\\n        \\\"layout\\\": {\\n      ##  Applies the following layout arguments to legends that have the \\\"orient\\\": \\\"top-right\\\" \\n          \\\"top-right\\\": {\\n            \\\"anchor\\\": \\\"middle\\\",\\n            \\\"direction\\\": \\\"vertical\\\",\\n            \\\"center\\\": true,\\n            \\\"margin\\\": 10,\\n          }\\n        }\\n      }\\n  },\\n##  ---------------------------------------------------------------------------------------------------------------------------\\n##  SECTION 1: Signals --------------------------------------------------------------------------------------------------------\\n##  - Define dynamic variables (Signals) that can be updated at any point during the specification\\n  \\\"signals\\\": [\\n    {\\n    ##  Sets the domain space for the visualization - will change if window size is adjusted \\n      \\\"name\\\": \\\"xrange\\\",\\n      \\\"update\\\": \\\"[0, width]\\\" ## width is automatically defined based on autosize \\n    },\\n    {\\n    ##  Sets the range space for the visualization - will change if window size is adjusted \\n      \\\"name\\\": \\\"yrange\\\",\\n      \\\"update\\\": \\\"[height, 0]\\\" ## height is automatically defined based on autosize\\n    },\\n    {\\n    ## Updated by xdom signal \\n      \\\"name\\\": \\\"xext\\\",\\n      \\\"update\\\": \\\"[0, width]\\\"\\n    },\\n    {\\n    ##  Updated by ydom signal\\n      \\\"name\\\": \\\"yext\\\",\\n      \\\"update\\\": \\\"[height, 0]\\\"\\n    },\\n    {\\n    ##  Default filter to only display ipv4 connection behavior\\n      \\\"name\\\": \\\"networkType\\\",\\n      \\\"value\\\": null,\\n      \\\"update\\\": \\\"opensearchDashboardsAddFilter({\\\\\\\"match_phrase\\\\\\\": { \\\\\\\"network.type\\\\\\\": 'ipv4' } }, 'MALCOLM_NETWORK_INDEX_PATTERN_REPLACER')\\\"\\n    },\\n    {\\n    ## Filter to related ip on User double click of node\\n      \\\"name\\\": \\\"click\\\",\\n      \\\"value\\\": null,\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": \\\"symbol:dblclick!\\\",\\n          \\\"update\\\": \\\"opensearchDashboardsAddFilter({\\\\\\\"match_phrase\\\\\\\": { \\\\\\\"related.ip\\\\\\\": datum.ip } }, 'MALCOLM_NETWORK_INDEX_PATTERN_REPLACER')\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"down\\\",\\n      \\\"value\\\": null,\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": \\\"mouseup,touchend\\\",\\n          \\\"update\\\": \\\"null\\\"\\n        },\\n        {\\n          \\\"events\\\": \\\"mousedown, touchstart\\\",\\n          \\\"update\\\": \\\"xy()\\\"\\n        },\\n        {\\n          \\\"events\\\": \\\"symbol:mousedown, symbol:touchstart\\\",\\n          \\\"update\\\": \\\"null\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"xcur\\\",\\n      \\\"value\\\": null,\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": \\\"mousedown, touchstart, touchend\\\",\\n          \\\"update\\\": \\\"xdom\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"ycur\\\",\\n      \\\"value\\\": null,\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": \\\"mousedown, touchstart, touchend\\\",\\n          \\\"update\\\": \\\"ydom\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"delta\\\",\\n      \\\"value\\\": [0, 0],\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": [\\n            {\\n              \\\"source\\\": \\\"window\\\",\\n              \\\"type\\\": \\\"mousemove\\\",\\n              \\\"consume\\\": true,\\n              \\\"between\\\": [\\n                {\\n                  \\\"type\\\": \\\"mousedown\\\"\\n                },\\n                {\\n                  \\\"source\\\": \\\"window\\\",\\n                  \\\"type\\\": \\\"mouseup\\\"\\n                }\\n              ]\\n            },\\n            {\\n              \\\"type\\\": \\\"touchmove\\\",\\n              \\\"consume\\\": true,\\n              \\\"filter\\\": \\\"event.touches.length === 1\\\"\\n            }\\n          ],\\n          \\\"update\\\": \\\"down ? [down[0]-x(), y()-down[1]] : [0,0]\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"anchor\\\",\\n      \\\"value\\\": [0, 0],\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": \\\"wheel\\\",\\n          \\\"update\\\": \\\"[invert('xscale', x()), invert('yscale', y())]\\\"\\n        },\\n        {\\n          \\\"events\\\": {\\n            \\\"type\\\": \\\"touchstart\\\",\\n            \\\"filter\\\": \\\"event.touches.length===2\\\"\\n          },\\n          \\\"update\\\": \\\"[(xdom[0] + xdom[1]) / 2, (ydom[0] + ydom[1]) / 2]\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"zoom\\\",\\n      \\\"value\\\": 1,\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": \\\"wheel!\\\",\\n          \\\"force\\\": true,\\n          \\\"update\\\": \\\"pow(1.001, event.deltaY * pow(16, event.deltaMode))\\\"\\n        },\\n        {\\n          \\\"events\\\": {\\n            \\\"signal\\\": \\\"dist2\\\"\\n          },\\n          \\\"force\\\": true,\\n          \\\"update\\\": \\\"dist1 / dist2\\\"\\n        },\\n        {\\n          \\\"events\\\": [\\n            {\\n              \\\"source\\\": \\\"view\\\",\\n              \\\"type\\\": \\\"dblclick\\\"\\n            }\\n          ],\\n          \\\"update\\\": \\\"1\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"dist1\\\",\\n      \\\"value\\\": 0,\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": {\\n            \\\"type\\\": \\\"touchstart\\\",\\n            \\\"filter\\\": \\\"event.touches.length===2\\\"\\n          },\\n          \\\"update\\\": \\\"pinchDistance(event)\\\"\\n        },\\n        {\\n          \\\"events\\\": {\\n            \\\"signal\\\": \\\"dist2\\\"\\n          },\\n          \\\"update\\\": \\\"dist2\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"dist2\\\",\\n      \\\"value\\\": 0,\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": {\\n            \\\"type\\\": \\\"touchmove\\\",\\n            \\\"consume\\\": true,\\n            \\\"filter\\\": \\\"event.touches.length===2\\\"\\n          },\\n          \\\"update\\\": \\\"pinchDistance(event)\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"xdom\\\",\\n      \\\"update\\\": \\\"xext\\\",\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": {\\n            \\\"signal\\\": \\\"delta\\\"\\n          },\\n          \\\"update\\\": \\\"[xcur[0] + span(xcur) * delta[0] / width, xcur[1] + span(xcur) * delta[0] / width]\\\"\\n        },\\n        {\\n          \\\"events\\\": {\\n            \\\"signal\\\": \\\"zoom\\\"\\n          },\\n          \\\"update\\\": \\\"[anchor[0] + (xdom[0] - anchor[0]) * zoom, anchor[0] + (xdom[1] - anchor[0]) * zoom]\\\"\\n        },\\n        {\\n          \\\"events\\\": [\\n            {\\n              \\\"source\\\": \\\"view\\\",\\n              \\\"type\\\": \\\"dblclick\\\"\\n            }\\n          ],\\n          \\\"update\\\": \\\"xrange\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"ydom\\\",\\n      \\\"update\\\": \\\"yext\\\",\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": {\\n            \\\"signal\\\": \\\"delta\\\"\\n          },\\n          \\\"update\\\": \\\"[ycur[0] + span(ycur) * delta[1] / height, ycur[1] + span(ycur) * delta[1] / height]\\\"\\n        },\\n        {\\n          \\\"events\\\": {\\n            \\\"signal\\\": \\\"zoom\\\"\\n          },\\n          \\\"update\\\": \\\"[anchor[1] + (ydom[0] - anchor[1]) * zoom, anchor[1] + (ydom[1] - anchor[1]) * zoom]\\\"\\n        },\\n        {\\n          \\\"events\\\": [\\n            {\\n              \\\"source\\\": \\\"view\\\",\\n              \\\"type\\\": \\\"dblclick\\\"\\n            }\\n          ],\\n          \\\"update\\\": \\\"yrange\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"size\\\",\\n      \\\"update\\\": \\\"clamp(20 / span(xdom), 1, 1000)\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"cx\\\",\\n      \\\"update\\\": \\\"width / 2\\\",\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": \\\"[symbol:mousedown, window:mouseup] > window:mousemove\\\",\\n          \\\"update\\\": \\\"cx==width/2?cx+0.001:width/2\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"cy\\\",\\n      \\\"update\\\": \\\"height / 2\\\"\\n    },\\n    {\\n    ##  Static setting of nodeRadius - does not actually impact visual radius of nodes \\n    ##  - Used for nbody charge calculations and arrow positioning calculations \\n      \\\"name\\\": \\\"nodeRadius\\\",\\n      \\\"value\\\": 15,\\n      /* \\n      ##  Gets user input from slider to determine nodeRadius. \\n      ##  - Commented out 6/18 because feature is not needed at this time [MZ] \\n      \\\"bind\\\": {\\n        \\\"input\\\": \\\"range\\\",\\n        \\\"min\\\": 1,\\n        \\\"max\\\": 50,\\n        \\\"step\\\": 1\\n      },\\n      */\\n    },\\n    {\\n      \\\"name\\\": \\\"dynamicRadius\\\",\\n      \\\"value\\\": false,\\n      \\\"bind\\\":{\\n        \\\"input\\\": \\\"radio\\\",\\n        \\\"options\\\": [true,false]\\n      }\\n    },\\n    {\\n    ##  Sets collide force value \\n      \\\"name\\\": \\\"nodeCharge\\\",\\n      \\\"value\\\":-50,\\n      /* \\n      ##  Gets user input from slider to determine nodeCharge. \\n      ##  - Commented out 6/18 because feature is not needed at this time [MZ] \\n      \\\"bind\\\": {\\n        \\\"input\\\": \\\"range\\\",\\n        \\\"min\\\": -100,\\n        \\\"max\\\": 10,\\n        \\\"step\\\": 1\\n      }\\n      */\\n    },\\n    {\\n    ## Sets static distance between nodes\\n    ##  - Used for links force calculation \\n    ##  NOTE: (future idea) Dynamically define linkDistance as a function of doc_count to represent varying clustering capability (longer link == less connections, shorter link == more connections and higher clustering )   \\n      \\\"name\\\": \\\"linkDistance\\\",\\n      \\\"value\\\": 80,\\n    },\\n    {\\n    ##  Determines whether a node is being hovered over and \\n    ##  - Used for positioning nodes \\n      \\\"description\\\": \\\"State variable for active node fix status.\\\",\\n      \\\"name\\\": \\\"fix\\\",\\n      \\\"value\\\": false,\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": \\\"symbol:mouseout[!event.buttons], window:mouseup\\\",\\n          \\\"update\\\": \\\"false\\\"\\n        },\\n        {\\n          \\\"events\\\": \\\"symbol:mouseover\\\",\\n          \\\"update\\\": \\\"fix || true\\\",\\n          \\\"force\\\": true\\n        },\\n        {\\n          \\\"events\\\": \\\"[symbol:mousedown, window:mouseup] > window:mousemove!\\\",\\n          \\\"update\\\": \\\"xy()\\\",\\n          \\\"force\\\": true\\n        }\\n      ]\\n    },\\n    {\\n    ##  Gets datum index value based on which node is being hovered over \\n    ##  - Used for positioning nodes\\n      \\\"description\\\": \\\"Graph node most recently interacted with.\\\",\\n      \\\"name\\\": \\\"node\\\",\\n      \\\"value\\\": null,\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": \\\"symbol:mouseover\\\",\\n          \\\"update\\\": \\\"fix === true ? datum.index : node\\\"\\n        }\\n      ]\\n    },\\n    {\\n    ##  Gets node-specific information about node being hovered over by user \\n    ##  - Used for node tooltip  \\n      \\\"name\\\": \\\"nodeHover\\\",\\n      \\\"value\\\": {\\n        \\\"id\\\": null,\\n        \\\"connections\\\": []\\n      },\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": \\\"symbol:mouseover\\\",\\n          \\\"update\\\": \\\"{'id':datum.index, 'connections':split(datum.sources+','+datum.targets,',')}\\\"\\n        },\\n        {\\n          \\\"events\\\": \\\"symbol:mouseout\\\",\\n          \\\"update\\\": \\\"{'id':null, 'connections':[]}\\\"\\n        }\\n      ]\\n    },\\n    {\\n    ##  Double clicking in blank space resets graph to nodes clustering around the middle \\n      \\\"description\\\": \\\"Flag to restart Force simulation upon data changes.\\\",\\n      \\\"name\\\": \\\"restart\\\",\\n      \\\"value\\\": false,\\n      \\\"on\\\": [\\n        {\\n          \\\"events\\\": {\\n            \\\"signal\\\": \\\"fix\\\"\\n          },\\n          \\\"update\\\": \\\"fix && fix.length\\\"\\n        }\\n      ]\\n    },\\n  ],\\n## --------------------------------------------------------------------------------------------------------------------------\\n##  SECTION 2: DATA --------------------------------------------------------------------------------------------------------\\n##  Define datasets and data normalization to be worked with in schema \\n  \\\"data\\\": [\\n    {\\n      \\\"name\\\": \\\"raw-data\\\",\\n      \\\"url\\\": {\\n          \\\"index\\\": \\\"MALCOLM_NETWORK_INDEX_PATTERN_REPLACER\\\",\\n          \\\"body\\\": {\\n            \\\"query\\\": {\\n              \\\"bool\\\": {\\n                \\\"must\\\": [\\n                  {\\n                    \\\"match\\\":{\\n                      \\\"event.dataset\\\":\\\"ntp\\\",\\n                    }\\n                  }\\n                  \\\"%dashboard_context-must_clause%\\\"\\n                ],\\n                \\\"must_not\\\": [\\n                  \\\"%dashboard_context-must_not_clause%\\\"\\n                ],\\n                \\\"filter\\\": [\\n                  \\\"%dashboard_context-filter_clause%\\\",\\n                  {\\n                    \\\"range\\\": {\\n                      \\\"MALCOLM_OTHER_INDEX_TIME_FIELD_REPLACER\\\": {\\n                        \\\"%timefilter%\\\": true\\n                      }\\n                    }\\n                  },\\n                  {\\n                    \\\"exists\\\": {\\n                      \\\"field\\\": \\\"event.id\\\"\\n                    }\\n                  },\\n                  {\\n                    \\\"exists\\\": {\\n                      \\\"field\\\": \\\"timestamp\\\"\\n                    }\\n                  },\\n\\n              ]\\n            }\\n          },\\n          \\\"aggs\\\": {\\n          ##  Define parameters for \\n            \\\"connections\\\": {\\n              \\\"composite\\\": {\\n                \\\"size\\\": 1000,\\n                \\\"sources\\\": [\\n                  {\\n                    \\\"src\\\": {\\n                      \\\"terms\\\": {\\\"field\\\": \\\"source.ip\\\" }\\n                    }\\n                  },\\n                  {\\n                    \\\"dst\\\": {\\n                      \\\"terms\\\": {\\\"field\\\": \\\"destination.ip\\\"}\\n                    }\\n                  }\\n                ]\\n              },\\n              \\\"aggs\\\": {\\n              ##  Determine what fields to pull from arkime_sessions  \\n                \\\"top_tags\\\": {\\n                  \\\"top_hits\\\": {\\n                    \\\"size\\\": 1,\\n                    \\\"_source\\\": {\\n                      \\\"includes\\\": [\\n                        \\\"tags\\\",\\n                        \\\"source\\\",\\n                        \\\"destination\\\",\\n                        \\\"source.ip\\\",\\n                        \\\"destination.ip\\\",\\n                        \\\"zeek.ntp\\\"\\n                      ]\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      },\\n      \\\"format\\\": {\\n      ##  Group arkime_data relative to its connections \\n        \\\"property\\\": \\\"aggregations.connections.buckets\\\"\\n      }\\n    },\\n    {\\n    ## Transform raw-data into source/target link definitions \\n      \\\"name\\\": \\\"link-data-raw\\\",\\n      \\\"source\\\": \\\"raw-data\\\",\\n      \\\"transform\\\": [\\n      ##  OPTIMIZE: Check if doc_count and tags are actually needed as part of this dataset\\n        {\\n        ##  Renames key.src from raw-data to source\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"source\\\",\\n          \\\"expr\\\": \\\"datum.key.src\\\"\\n        },\\n        {\\n        ##  Renames key.dst from raw-data to target\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"target\\\",\\n          \\\"expr\\\": \\\"datum.key.dst\\\"\\n        },\\n        {\\n        ##  Renames doc_count from raw-data to value\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"value\\\",\\n          \\\"expr\\\": \\\"datum.doc_count\\\"\\n        },\\n        {\\n        ##  Renames tags from raw-data to tags\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"tags\\\",\\n          \\\"expr\\\": \\\"datum.top_tags.hits.hits[0]._source.tags\\\"\\n        },\\n        {\\n        ##  Renames zeek.ntp from raw-data to ntp_data\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"ntp_data\\\",\\n          \\\"expr\\\": \\\"datum.top_tags.hits.hits[0]._source.zeek.ntp\\\"\\n        },\\n        {\\n        ##  Assigns each newly created link between source/target a unique identifier starting at 1 \\n          \\\"type\\\": \\\"window\\\",\\n          \\\"ops\\\": [\\n            \\\"row_number\\\"\\n          ],\\n          \\\"as\\\": [\\n            \\\"index\\\"\\n          ]\\n        },\\n      ]\\n    },\\n    {\\n    ##  Exact replica of link-data-raw\\n    ##  NOTE: For some reason, when a dataset is used to make a linkpath that dataset is set to null when linkpat transform is complete. Additional features required use of link-data-raw so duplication was the solution [MZ]\\n      \\\"name\\\": \\\"link-data\\\",\\n      \\\"source\\\": \\\"link-data-raw\\\"\\n    },\\n    \\n    {\\n      \\\"name\\\": \\\"source-connections\\\",\\n      \\\"source\\\": \\\"link-data-raw\\\",\\n      \\\"transform\\\": [\\n        {\\n          \\\"type\\\": \\\"aggregate\\\",\\n          \\\"groupby\\\": [\\n            \\\"source\\\"\\n          ],\\n          \\\"ops\\\": [\\n            \\\"values\\\"\\n          ],\\n          \\\"fields\\\": [\\n            \\\"target\\\"\\n          ],\\n          \\\"as\\\": [\\n            \\\"connections\\\"\\n          ]\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"targets\\\",\\n          \\\"expr\\\": \\\"pluck(datum.connections, 'target')\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"target-connections\\\",\\n      \\\"source\\\": \\\"link-data-raw\\\",\\n      \\\"transform\\\": [\\n        {\\n          \\\"type\\\": \\\"aggregate\\\",\\n          \\\"groupby\\\": [\\n            \\\"target\\\"\\n          ],\\n          \\\"ops\\\": [\\n            \\\"values\\\"\\n          ],\\n          \\\"fields\\\": [\\n            \\\"source\\\"\\n          ],\\n          \\\"as\\\": [\\n            \\\"connections\\\"\\n          ]\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"sources\\\",\\n          \\\"expr\\\": \\\"pluck(datum.connections, 'source')\\\"\\n        }\\n      ]\\n    },\\n    {\\n    ##  Creates device lookup dataset for sources\\n      \\\"name\\\": \\\"node-src-device-data\\\",\\n      \\\"source\\\": \\\"raw-data\\\",\\n      \\\"transform\\\": [\\n        {\\n        ##  Collects source device info from raw-data to store in device_src\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"device_src\\\",\\n          \\\"expr\\\": \\\"datum.top_tags.hits.hits[0]._source.source\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"ip_address\\\",\\n          \\\"expr\\\": \\\"datum.device_src.ip\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"segment\\\",\\n          \\\"expr\\\": \\\"isValid(datum.device_src.segment) ? datum.device_src.segment.name : null\\\"\\n        },\\n      ]\\n    },\\n    {\\n    ##  Creates device lookup dataset for destinations\\n      \\\"name\\\": \\\"node-dst-device-data\\\",\\n      \\\"source\\\": \\\"raw-data\\\",\\n      \\\"transform\\\": [\\n        {\\n        ##  Collects destination device info from raw-data to store in device_dst\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"device_dst\\\",\\n          \\\"expr\\\": \\\"datum.top_tags.hits.hits[0]._source.destination\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"ip_address\\\",\\n          \\\"expr\\\": \\\"datum.device_dst.ip\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"segment\\\",\\n          \\\"expr\\\": \\\"isValid(datum.device_dst.segment) ? datum.device_dst.segment.name : null\\\"\\n        },\\n      ]\\n    },\\n    {\\n    ##  Defines dataset that creates the individual node objects & remove duplicates \\n      \\\"name\\\": \\\"node-data-raw\\\",\\n      \\\"source\\\": \\\"raw-data\\\",\\n      \\\"transform\\\": [\\n        {\\n        ##  Renames key.src from raw-data to source\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"source\\\",\\n          \\\"expr\\\": \\\"datum.key.src\\\"\\n        },\\n        {\\n        ##  Renames key.dst from raw-data to target\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"target\\\",\\n          \\\"expr\\\": \\\"datum.key.dst\\\"\\n        },\\n        {\\n        ##  Renames doc_count from raw-data to value\\n        ##  XXX: doc_count has a lot of transformation in this dataset, keep an eye on its value as it transforms \\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"value\\\",\\n          \\\"expr\\\": \\\"datum.doc_count\\\"\\n        },\\n        {\\n        ##  Grabs specific tag array from raw-data to tags\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"tags\\\",\\n          \\\"expr\\\": \\\"datum.top_tags.hits.hits[0]._source.tags\\\"\\n        },\\n        {\\n        ##  Create 'dict'-like item to map source/target connections \\n          \\\"type\\\": \\\"fold\\\",\\n          \\\"fields\\\": [\\n            \\\"source\\\",\\n            \\\"target\\\"\\n          ],\\n          \\\"as\\\": [\\n            \\\"key\\\",\\n            \\\"ip\\\"\\n          ]\\n        },\\n        {\\n        ##  Collect sum of connections based on target ip address \\n        ##  - Every node is a destination/target but not every node is a source \\n          \\\"type\\\": \\\"aggregate\\\",\\n          \\\"groupby\\\": [\\n            \\\"ip\\\"\\n          ],\\n          \\\"ops\\\": [\\n            \\\"sum\\\",\\n          ],\\n          \\\"fields\\\": [\\n            \\\"value\\\",\\n          ],\\n          \\\"as\\\": [\\n            \\\"doc_count\\\",\\n          ]\\n        },\\n        {\\n        ##  Lookup tag values for the target node from the raw-data set\\n          \\\"type\\\": \\\"lookup\\\",\\n          \\\"from\\\": \\\"raw-data\\\",\\n          \\\"key\\\": \\\"key.dst\\\",\\n          \\\"fields\\\": [\\n            \\\"ip\\\"\\n          ],\\n          \\\"values\\\": [\\n            \\\"top_tags.hits.hits[0]._source.tags\\\",\\n          ],\\n          \\\"as\\\": [\\n            \\\"tags\\\",\\n          ],\\n          \\\"default\\\": [\\n            null\\n          ]\\n        },\\n        {\\n        ##  Assign group field as a 1st value of tags array - if it exists\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"group\\\",\\n          \\\"expr\\\": \\\"length(datum.tags) && datum.tags[0] ? datum.tags[0] : 'No Tag'\\\"\\n        },\\n        {\\n        ##  For source node, determine if the device data exists \\n        ##  NOTE: This is important because the device data sometimes only stored in the source OR destination field of raw-data (depending on connection context) \\n          \\\"type\\\": \\\"lookup\\\",\\n          \\\"from\\\": \\\"node-src-device-data\\\",\\n          \\\"key\\\": \\\"key.src\\\",\\n          \\\"fields\\\": [\\n            \\\"ip\\\"\\n          ],\\n          \\\"values\\\": [\\n            \\\"device_src\\\", \\\"segment\\\"\\n          ],\\n          \\\"as\\\": [\\n            \\\"device1\\\", \\\"src_segment\\\"\\n          ],\\n          \\\"default\\\": [\\n            null\\n          ]\\n        },\\n        {\\n        ##  For target node, determine if the device data exists \\n          \\\"type\\\": \\\"lookup\\\",\\n          \\\"from\\\": \\\"node-dst-device-data\\\",\\n          \\\"key\\\": \\\"key.dst\\\",\\n          \\\"fields\\\": [\\n            \\\"ip\\\"\\n          ],\\n          \\\"values\\\": [\\n            \\\"device_dst\\\", \\\"segment\\\"\\n          ],\\n          \\\"as\\\": [\\n            \\\"device2\\\", \\\"dst_segment\\\"\\n          ],\\n          \\\"default\\\": [\\n            null\\n          ]\\n        },\\n        {\\n        ##  Assigns each newly created node a unique identifier starting at 1 \\n          \\\"type\\\": \\\"window\\\",\\n          \\\"ops\\\": [\\n            \\\"row_number\\\"\\n          ],\\n          \\\"as\\\": [\\n            \\\"index\\\"\\n          ]\\n        }\\n        {             // ip segment extracted\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"segment\\\",\\n          \\\"expr\\\": \\\"!isArray(datum.src_segment) ? datum.src_segment : (!isArray(datum.dst_segment) ? datum.dst_segment : null)\\\"\\n          //\\\"expr\\\": \\\"(datum.device2.device ? (isValid(datum.device2.segment) ? datum.device2.segment.name : 'null') : (!isArray(datum.device1.device) ? (isValid(datum.device1.segment ? datum.device1.segment.name : 'null') : 'null') )\\\"\\n        }\\n      ]\\n    },\\n    {\\n    ##  Defines dataset that is used to define node-to-node behavior\\n      \\\"name\\\": \\\"node-data\\\",\\n      \\\"source\\\": \\\"node-data-raw\\\",\\n      \\\"transform\\\": [\\n        {\\n        ##  Define source based on which targets it reaches out to\\n          \\\"type\\\": \\\"lookup\\\",\\n          \\\"from\\\": \\\"source-connections\\\",\\n          \\\"key\\\": \\\"source\\\",\\n          \\\"fields\\\": [\\n            \\\"ip\\\"\\n          ],\\n          \\\"values\\\": [\\n            \\\"targets\\\"\\n          ],\\n          \\\"as\\\": [\\n            \\\"targets\\\"\\n          ],\\n          \\\"default\\\": [\\n            \\\"\\\"\\n          ]\\n        },\\n        {\\n        ##  Define target based on which sources reach out to it \\n          \\\"type\\\": \\\"lookup\\\",\\n          \\\"from\\\": \\\"target-connections\\\",\\n          \\\"key\\\": \\\"target\\\",\\n          \\\"fields\\\": [\\n            \\\"ip\\\"\\n          ],\\n          \\\"values\\\": [\\n            \\\"sources\\\"\\n          ],\\n          \\\"as\\\": [\\n            \\\"sources\\\"\\n          ],\\n          \\\"default\\\": [\\n            \\\"\\\"\\n          ]\\n        },\\n        {\\n        ##  Apply series of forces to determine where on the screen the nodes will sit in relation to each other \\n          \\\"type\\\": \\\"force\\\",\\n          \\\"iterations\\\": 600,\\n          \\\"restart\\\": {\\n            \\\"signal\\\": \\\"restart\\\"\\n          },\\n          \\\"velocityDecay\\\": 0.7,\\n          \\\"signal\\\": \\\"force\\\",\\n          \\\"forces\\\": [\\n            {\\n              \\\"force\\\": \\\"center\\\",\\n              \\\"x\\\": {\\n                \\\"signal\\\": \\\"cx\\\"\\n              },\\n              \\\"y\\\": {\\n                \\\"signal\\\": \\\"cy\\\"\\n              }\\n            },\\n            {\\n              \\\"force\\\": \\\"x\\\",\\n              \\\"x\\\": {\\n                \\\"expr\\\": \\\"width/2\\\"\\n              },\\n              \\\"strength\\\": 0.0015\\n            },\\n            {\\n              \\\"force\\\": \\\"y\\\",\\n              \\\"y\\\": {\\n                \\\"expr\\\": \\\"height/2\\\"\\n              },\\n              \\\"strength\\\": 0.0015\\n            },\\n            {\\n              \\\"force\\\": \\\"collide\\\",\\n              \\\"radius\\\": {\\\"signal\\\": \\\"sqrt(4 * nodeRadius * nodeRadius)\\\"},\\n              \\\"iterations\\\": 1,\\n              \\\"strength\\\": 0.6\\n            },\\n            {\\n              \\\"force\\\": \\\"nbody\\\",\\n              \\\"strength\\\": {\\n                \\\"signal\\\": \\\"nodeCharge\\\"\\n              },\\n              \\\"distanceMin\\\": 1,\\n              \\\"distanceMax\\\": 300\\n            },\\n            {\\n              \\\"force\\\": \\\"link\\\",\\n              \\\"links\\\": \\\"link-data\\\",\\n              \\\"distance\\\": {\\\"expr\\\": \\\"linkDistance\\\"},\\n              \\\"id\\\": \\\"ip\\\",\\n              \\\"strength\\\": .2\\n            }\\n          ]\\n          \\n        },\\n        {\\n        ##  Calculate x position of node\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"fx\\\",\\n          \\\"expr\\\": \\\"fix[0]!=null && node==datum.index ?invert('xscale',fix[0]):null\\\"\\n        },\\n        {\\n        ##  Calculate y position of node\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"fy\\\",\\n          \\\"expr\\\": \\\"fix[1]!=null && node==datum.index ?invert('yscale',fix[1]):null\\\"\\n        },\\n        {\\n        ##  Calculate max and min connection counts\\n        ##  - Used to normalize for nodeSizing \\n          \\\"type\\\": \\\"extent\\\", \\n          \\\"field\\\": \\\"doc_count\\\",\\n          \\\"signal\\\": \\\"doc_max_min\\\",\\n        },\\n        {\\n        ##  Normalize Connection counts\\n        ##  - Used in nodeSizing\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"expr\\\": \\\"(datum.doc_count - doc_max_min[0]) / (doc_max_min[1] - doc_max_min[0]) || .00001\\\",\\n          \\\"as\\\": \\\"doc_count_normal\\\"\\n        },\\n        {\\n        ##  Determine where the device info exists and allocate it as the device \\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"device\\\",\\n          \\\"expr\\\": \\\"(datum.device2.device ? datum.device2.device : (datum.device1.device ? datum.device1.device : 'null') )\\\"\\n        },\\n        {\\n        ##  Extract role value as a string \\n        ##  - Used in node tooltip\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"roles\\\",\\n          \\\"expr\\\": \\\"datum.device.role ? toString(datum.device.role) : 'unknown'\\\"\\n        },\\n        {\\n        ##  Extract manufacturer value as a string \\n        ##  - Used in node tooltip\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"manufacturer\\\",\\n          \\\"expr\\\": \\\"toString(datum.device.manufacturer)\\\"\\n        },\\n        {\\n        ##  Extract device name value as a string \\n        ##  - Used in node tooltip\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"name\\\",\\n          \\\"expr\\\": \\\"toString(datum.device.name)\\\"\\n        },\\n        {\\n        ##  Determine node size based on normalized connection count number \\n          \\\"type\\\":\\\"formula\\\",\\n          \\\"as\\\": \\\"size_node\\\",\\n          \\\"expr\\\": \\\"scale('nodeSize', datum.doc_count_normal * 10000)\\\",\\n        },\\n      ]\\n    },\\n    {\\n    ##  Defines linkpath data to connect nodes visually \\n      \\\"name\\\": \\\"link-data2\\\",\\n      \\\"source\\\": \\\"link-data\\\",\\n      \\\"transform\\\": [\\n        {\\n        ##  creates SVG paths between source (x,y) and target (x,y)\\n          \\\"type\\\": \\\"linkpath\\\",\\n          \\\"require\\\": {\\n            \\\"signal\\\": \\\"force\\\"\\n          },\\n          \\\"shape\\\": \\\"line\\\",\\n          \\\"sourceX\\\": {\\n            \\\"expr\\\": \\\"scale('xscale', datum.source.x)\\\"\\n          },\\n          \\\"sourceY\\\": {\\n            \\\"expr\\\": \\\"scale('yscale', datum.source.y)\\\"\\n          },\\n          \\\"targetX\\\": {\\n            \\\"expr\\\": \\\"scale('xscale', datum.target.x)\\\"\\n          },\\n          \\\"targetY\\\": {\\n            \\\"expr\\\": \\\"scale('yscale', datum.target.y)\\\"\\n          }\\n        },\\n        {\\n        ##  Determine bidirectionality of connections\\n        ##  - used in link tooltip\\n        ##  OPTIMIZE: Need to confirm that this is the most efficient way to do this \\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"expr\\\": \\\" (length(datum.source.sources) == 1 && length(datum.source.targets)==1) && datum.source.sources[0] == datum.source.targets[0] ? true : false \\\",\\n          \\\"as\\\": \\\"bidirectional\\\"\\n        }\\n      ]\\n    }\\n  ],\\n## --------------------------------------------------------------------------------------------------------------------------\\n##  SECTION 3: Scales -------------------------------------------------------------------------------------------------------\\n##  Maps data values to either categorical data or numerical data to change the way the data presents visually \\n  \\\"scales\\\": [\\n    {\\n    ##  Determine color of node based on role\\n      \\\"name\\\": \\\"color\\\",\\n      \\\"type\\\": \\\"ordinal\\\",\\n      \\\"domain\\\": {\\\"data\\\": \\\"node-data\\\", \\\"field\\\": \\\"segment\\\"},\\n      //\\\"domain\\\": [0, 255],\\n      \\\"range\\\": {\\\"scheme\\\": \\\"turbo\\\"},\\n    },\\n    {\\n      \\\"name\\\": \\\"ntp_version\\\",\\n      \\\"domain\\\": [1,4],\\n      \\\"range\\\": {\\\"scheme\\\": \\\"teals\\\"}\\n    }\\n    {\\n    ##  Sets x limits for where nodes can exists\\n      \\\"name\\\": \\\"xscale\\\",\\n      \\\"zero\\\": false,\\n      \\\"domain\\\": {\\n        \\\"signal\\\": \\\"xdom\\\"\\n      },\\n      \\\"range\\\": {\\n        \\\"signal\\\": \\\"xrange\\\"\\n      }\\n    },\\n    {\\n    ##  Sets y limits for where nodes can exists\\n      \\\"name\\\": \\\"yscale\\\",\\n      \\\"zero\\\": false,\\n      \\\"domain\\\": {\\n        \\\"signal\\\": \\\"ydom\\\"\\n      },\\n      \\\"range\\\": {\\n        \\\"signal\\\": \\\"yrange\\\"\\n      }\\n    },\\n    {\\n    ##  Makes nodeSize relative to the nodes on the current screen \\n      \\\"name\\\": \\\"nodeSize\\\",\\n      \\\"type\\\": \\\"linear\\\",\\n      \\\"domain\\\": {\\\"data\\\": \\\"node-data-raw\\\", \\\"field\\\": \\\"doc_count\\\"},\\n      \\\"range\\\": [500,700],\\n    },\\n    {\\n    ##  Used for Address Type Legend \\n      \\\"name\\\": \\\"shape\\\",\\n      \\\"type\\\": \\\"ordinal\\\",\\n      \\\"domain\\\": [\\\"non-broadcast\\\", \\\"broadcast\\\"],\\n      \\\"range\\\": [\\\"circle\\\", \\\"cross\\\"], \\n    },\\n    \\n  ],\\n## ----------------------------------------------------------------------------------------------------------------------------\\n##  SECTION 4: Legends --------------------------------------------------------------------------------------------------------\\n##  Visual representation of scales for user to interprete data \\n  \\\"legends\\\": [\\n    {\\n    ##  Legend for segment colors \\n      \\\"title\\\": \\\"Segment\\\",\\n      \\\"fill\\\": \\\"color\\\",\\n      \\\"fillColor\\\": \\\"beige\\\",\\n      \\\"padding\\\": 10,\\n      \\\"symbolType\\\": \\\"diamond\\\",\\n      \\\"symbolOpacity\\\": 0.8,\\n      \\\"symbolStrokeColor\\\": \\\"#3f444d\\\",\\n      \\\"symbolStrokeWidth\\\": 1.5,\\n      \\\"symbolSize\\\": 300,\\n      \\\"labelColor\\\": \\\"#3f444d\\\",\\n      \\\"labelFont\\\": \\\"Segoe UI\\\",\\n      \\\"labelFontSize\\\": 16,\\n      \\\"titleColor\\\": \\\"#3f444d\\\",\\n      \\\"titleFont\\\": \\\"Segoe UI\\\",\\n      \\\"titleAnchor\\\": \\\"center\\\",\\n      \\\"titleFontSize\\\": 18,\\n      \\\"titlePadding\\\": 6,\\n      \\\"columns\\\": 2,\\n      \\\"cornerRadius\\\": 5,\\n      ##  Referenced in Config section\\n      \\\"orient\\\":\\\"top-right\\\",\\n      \\\"direction\\\": \\\"horizontal\\\"\\n    },\\n        {\\n    ##  Legend for link colors \\n      \\\"title\\\": \\\"NTP Version\\\",\\n      \\\"fill\\\": \\\"ntp_version\\\",\\n      \\\"fillColor\\\": \\\"beige\\\",\\n      \\\"padding\\\": 10,\\n      \\\"labelColor\\\": \\\"#3f444d\\\",\\n      \\\"labelFont\\\": \\\"Segoe UI\\\",\\n      \\\"labelFontSize\\\": 16,\\n      \\\"titleColor\\\": \\\"#3f444d\\\",\\n      \\\"titleFont\\\": \\\"Segoe UI\\\",\\n      \\\"titleAnchor\\\": \\\"center\\\",\\n      \\\"titleFontSize\\\": 18,\\n      \\\"titlePadding\\\": 6,\\n      \\\"columns\\\": 2,\\n      \\\"cornerRadius\\\": 5,\\n      ##  Referenced in Config section\\n      \\\"orient\\\":\\\"top-right\\\",\\n      \\\"direction\\\": \\\"horizontal\\\"\\n    },\\n  ],\\n## --------------------------------------------------------------------------------------------------------------------------\\n##  SECTION 5: Marks --------------------------------------------------------------------------------------------------------\\n##  Determines how the data visually appears in the visualization\\n  \\\"marks\\\": [\\n    {\\n    ##  Connections between visual nodes\\n      \\\"type\\\": \\\"path\\\",\\n      \\\"name\\\": \\\"links\\\",\\n      \\\"zindex\\\": 1,\\n      \\\"from\\\": {\\\"data\\\": \\\"link-data2\\\"},\\n      \\\"encode\\\": {\\n        \\\"update\\\": {\\n          \\\"path\\\": {\\\"field\\\": \\\"path\\\"},\\n          ##  Logic set to shade links to grey when wither of the nodes are hovered over \\n          // \\\"stroke\\\": { \\\"signal\\\": \\\"(datum.source.index!=nodeHover.id && datum.target.index!=nodeHover.id) ? '#4FB9AF' :merge(hsl(scale('color', datum.source.group)), {l:0.64})\\\"},\\n          \\\"stroke\\\": { \\\"signal\\\": \\\"(datum.source.index!=nodeHover.id && datum.target.index!=nodeHover.id) ? merge(hsl(scale('ntp_version',toNumber(datum.ntp_data.version)))) :merge(hsl(scale('color', datum.source.group)), {l:0.64})\\\"},\\n          \\n          ##  Logic set to change link width to grey when wither of the nodes are hovered over \\n          \\\"strokeWidth\\\": { \\\"signal\\\": \\\"datum.source.index!=nodeHover.id && datum.target.index!=nodeHover.id ? 5:8\\\"},\\n        },\\n        \\\"hover\\\": {\\n        ##  Defines hover behvaior of links \\n          \\\"cursor\\\": {\\\"value\\\":\\\"pointer\\\"},\\n          \\\"tooltip\\\": {\\\"signal\\\": \\\"{'Connection': datum.bidirectional == true ? datum.key.src+' ↔ ' +datum.key.dst : datum.key.src+' → ' +datum.key.dst, 'Version': datum.ntp_data.version, 'Mode': datum.ntp_data.mode_str, 'Direction': datum.bidirectional == true ? 'bi-directional' : 'uni-directional',}\\\"}\\n        }\\n       },\\n       \\\"transform\\\": [\\n        ##  OPTIMIZE: Unsure why linkpath transform is duplicated in specification? \\n        {\\n          \\\"type\\\": \\\"linkpath\\\",\\n          \\\"require\\\": {\\\"signal\\\": \\\"force\\\"},\\n          \\\"shape\\\": \\\"line\\\",\\n          \\\"sourceX\\\": {\\\"expr\\\": \\\"scale('xscale', datum.datum.source.x)\\\"},\\n          \\\"sourceY\\\": {\\\"expr\\\": \\\"scale('yscale', datum.datum.source.y)\\\"},\\n          \\\"targetX\\\": {\\\"expr\\\": \\\"scale('xscale', datum.datum.target.x)\\\"},\\n          \\\"targetY\\\": {\\\"expr\\\": \\\"scale('yscale', datum.datum.target.y)\\\"}\\n        },\\n        ##  Calculate angle values for positioning angles - imported from Deneb Force Directed graph so unsure how it works but it does\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"expr\\\": \\\"atan2(datum.datum.target.y - datum.datum.source.y,datum.datum.source.x - datum.datum.target.x)\\\",\\n          \\\"as\\\": \\\"angle1\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"expr\\\": \\\"(datum.angle1>=0?datum.angle1:(2*PI + datum.angle1)) * (360 / (2*PI))\\\",\\n          \\\"as\\\": \\\"angle2\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"expr\\\": \\\"(360-datum.angle2)*(PI/180)\\\",\\n          \\\"as\\\": \\\"angle3\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"expr\\\": \\\"(cos(datum.angle3)*(nodeRadius+5))+(scale('xscale',datum.datum.target.x))\\\",\\n          \\\"as\\\": \\\"arrowX\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"expr\\\": \\\"(sin(datum.angle3)*(nodeRadius+5))+(scale('yscale',datum.datum.target.y))\\\",\\n          \\\"as\\\": \\\"arrowY\\\"\\n        }\\n      ]\\n    },\\n    {\\n    ##  Arrows representing connections between nodes\\n      \\\"type\\\": \\\"symbol\\\",\\n      \\\"name\\\": \\\"arrows\\\",\\n      \\\"zindex\\\": 1,\\n      ##  NOTE: The data is another 'mark' source, not a 'data' source \\n      \\\"from\\\": { \\\"data\\\": \\\"links\\\"},\\n      \\\"encode\\\": {\\n        \\\"update\\\": {\\n          \\\"shape\\\": {\\\"value\\\": \\\"triangle\\\"},\\n          \\\"angle\\\": {\\\"signal\\\": \\\"-datum.angle2-90\\\"},\\n          \\\"x\\\": {\\\"signal\\\": \\\"datum.arrowX\\\" },\\n          \\\"y\\\": {\\\"signal\\\": \\\"datum.arrowY\\\"},\\n          \\\"text\\\": {\\\"signal\\\": \\\"'▲'\\\"},\\n          /*\\n          ##  DEBUG: When fill is not commented out it breaks the arrow behavior - no idea why\\n          \\\"fill\\\": {\\\"signal\\\": \\\"datum.source.index!=nodeHover.id && datum.target.index!=nodeHover.id ? '#929399':merge(hsl(scale('color', datum.source.group)), {l:0.64})\\\"},\\n          */\\n          \\\"size\\\": { \\\"signal\\\": \\\"nodeRadius==1 ? 0 : 300\\\"},\\n        },\\n      }\\n    },\\n    {\\n    ##  Visual representation of the nodes \\n      \\\"type\\\": \\\"symbol\\\",\\n      \\\"name\\\": \\\"nodes\\\",\\n      \\\"zindex\\\": 1,\\n      \\\"from\\\": {\\\"data\\\": \\\"node-data\\\"},\\n      \\\"encode\\\": {\\n        \\\"update\\\": {\\n          \\\"opacity\\\": {\\\"value\\\": 1},\\n          ##  Determine if ip address is broadcast or not and change shape accordingly \\n          // \\\"shape\\\": {\\\"signal\\\": \\\"split(datum.ip,'.')[3] === '255' ? 'cross' : 'circle'\\\"},  // removed for ntp specific\\n          \\\"shape\\\": {\\\"value\\\": \\\"circle\\\"},\\n          // \\\"fill\\\": {\\\"signal\\\": \\\"nodeHover.id===datum.index || indexof(nodeHover.connections, datum.ip)>-1 ? 'grey' : merge(hsl(scale('color', datum.ip)), {l:0.64})\\\"},\\n          \\\"fill\\\": {\\\"signal\\\": \\\"nodeHover.id===datum.index || indexof(nodeHover.connections, datum.ip)>-1 ? 'grey' : merge(hsl(scale('color', datum.segment)), {l:0.64})\\\"},\\n          \\\"stroke\\\": {\\\"signal\\\": \\\"nodeHover.id===datum.index || indexof(nodeHover.connections, datum.ip)>-1 ? scale('color', datum.device) : merge(hsl(scale('color', datum.device)), {l:0.84})\\\" },\\n          \\\"strokeWidth\\\": { \\\"value\\\": 3},\\n          \\\"strokeOpacity\\\": {\\\"value\\\": 1 },\\n          \\\"size\\\": {\\\"signal\\\":\\\"dynamicRadius ? datum.size_node : 4 * nodeRadius * nodeRadius\\\"},\\n          \\\"cursor\\\": {\\\"value\\\": \\\"pointer\\\"},\\n          \\\"x\\\": {\\\"signal\\\": \\\"fix[0]!=null && node===datum.index ?fix[0]:scale('xscale', datum.x)\\\" },\\n          \\\"y\\\": {\\\"signal\\\": \\\"fix[1]!=null && node===datum.index ?fix[1]:scale('yscale', datum.y)\\\"}\\n        },\\n        \\\"hover\\\": {\\n          \\\"tooltip\\\": { \\\"signal\\\": \\\"{'IP': datum.ip, 'Tag': datum.group, 'Connections': datum.doc_count, 'Device Role': datum.roles || 'unknown', 'Device Manufacturer': datum.manufacturer || 'unknown', 'Device Name': datum.name || 'unknown'}\\\"}\\n        },\\n      },\\n    },\\n    {\\n      \\\"type\\\": \\\"text\\\",\\n      \\\"name\\\": \\\"node-label\\\",\\n      \\\"zindex\\\": 2,\\n      \\\"from\\\": {\\\"data\\\": \\\"node-data\\\"},\\n      \\\"encode\\\": {\\n        \\\"update\\\": {\\n          \\\"text\\\": {\\\"signal\\\": \\\"datum.ip\\\"},\\n          \\\"fontWeight\\\": {\\\"value\\\": \\\"bold\\\"},\\n          \\\"fill\\\":{\\\"value\\\":\\\"#FFE4B5\\\"},\\n          \\\"cursor\\\": {\\\"value\\\": \\\"pointer\\\"},\\n          \\\"dx\\\": {\\\"value\\\": -2},\\n          \\\"dy\\\": {\\\"value\\\": -16},\\n          \\\"x\\\": {\\\"signal\\\": \\\"fix[0]!=null && node===datum.index ?fix[0]:scale('xscale', datum.x)\\\" },\\n          \\\"y\\\": {\\\"signal\\\": \\\"fix[1]!=null && node===datum.index ?fix[1]:scale('yscale', datum.y)\\\"}\\n        },\\n      }\\n    }\\n ] \\n## --------------------------------------------------------------------------------------------------------------------------\\n##  End of Spec :) \\n}\\n\"}}"
      },
      "id": "f805d650-adea-11f0-96f4-a1d36a85a6ea",
      "migrationVersion": {
        "visualization": "7.10.0"
      },
      "namespaces": [
        "default"
      ],
      "references": [],
      "type": "visualization",
      "updated_at": "2025-10-20T19:28:34.356Z",
      "version": "WzE2MTIsMV0="
    },
    {
      "attributes": {
        "description": "",
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"
        },
        "savedSearchRefName": "search_0",
        "title": "NAVV_1.0",
        "uiStateJSON": "{\"vis\":{\"sortColumn\":{\"colIndex\":10,\"direction\":\"desc\"}}}",
        "version": 1,
        "visState": "{\"title\":\"NAVV_1.0\",\"type\":\"table\",\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"count\",\"params\":{},\"schema\":\"metric\"},{\"id\":\"2\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"source.ip\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Source IP\"},\"schema\":\"bucket\"},{\"id\":\"3\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"source.oui\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":true,\"missingBucketLabel\":\"-\",\"customLabel\":\"Source MAC\"},\"schema\":\"bucket\"},{\"id\":\"4\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"source.segment.name\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":true,\"missingBucketLabel\":\"-\",\"customLabel\":\"Source Network\"},\"schema\":\"bucket\"},{\"id\":\"5\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"destination.segment.name\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":true,\"missingBucketLabel\":\"-\",\"customLabel\":\"Destination Network\"},\"schema\":\"bucket\"},{\"id\":\"6\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"destination.ip\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Destination IP\"},\"schema\":\"bucket\"},{\"id\":\"7\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"destination.oui\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":true,\"missingBucketLabel\":\"-\",\"customLabel\":\"Destination MAC\"},\"schema\":\"bucket\"},{\"id\":\"8\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"destination.port\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Port\"},\"schema\":\"bucket\"},{\"id\":\"9\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"network.protocol\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":true,\"missingBucketLabel\":\"Unmapped\",\"customLabel\":\"Service\"},\"schema\":\"bucket\"},{\"id\":\"10\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"protocol\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":true,\"missingBucketLabel\":\"No Protocol\",\"customLabel\":\"Protocol\"},\"schema\":\"bucket\"},{\"id\":\"11\",\"enabled\":true,\"type\":\"terms\",\"params\":{\"field\":\"zeek.conn.conn_state_description\",\"orderBy\":\"1\",\"order\":\"desc\",\"size\":100,\"otherBucket\":false,\"otherBucketLabel\":\"Other\",\"missingBucket\":false,\"missingBucketLabel\":\"Missing\",\"customLabel\":\"Conn State\"},\"schema\":\"bucket\"}],\"params\":{\"perPage\":100,\"showPartialRows\":false,\"showMetricsAtAllLevels\":false,\"showTotal\":false,\"totalFunc\":\"sum\",\"percentageCol\":\"\",\"row\":true}}"
      },
      "id": "eeb31a60-fc37-11ee-a696-1ddfa039ab2d",
      "migrationVersion": {
        "visualization": "7.10.0"
      },
      "namespaces": [
        "default"
      ],
      "references": [
        {
          "id": "52570870-e9d4-444f-a3df-e44c6757ed9f",
          "name": "search_0",
          "type": "search"
        }
      ],
      "type": "visualization",
      "updated_at": "2025-10-20T19:16:08.928Z",
      "version": "WzE1NDUsMV0="
    },
    {
      "attributes": {
        "columns": [
          "source.ip",
          "destination.ip",
          "zeek.ntp.version",
          "zeek.ntp.stratum",
          "zeek.ntp.mode_str",
          "zeek.ntp.org_time",
          "zeek.ntp.xmt_time",
          "event.id"
        ],
        "description": "",
        "hits": 0,
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"highlightAll\":false,\"version\":true,\"query\":{\"language\":\"lucene\",\"query\":\"event.dataset:ntp\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"
        },
        "sort": [
          [
            "MALCOLM_NETWORK_INDEX_TIME_FIELD_REPLACER",
            "desc"
          ]
        ],
        "title": "NTP - Logs",
        "version": 1
      },
      "id": "e8699550-eeac-11e9-bdef-65a192b7f586",
      "migrationVersion": {
        "search": "7.9.3"
      },
      "namespaces": [
        "default"
      ],
      "references": [
        {
          "id": "MALCOLM_NETWORK_INDEX_PATTERN_REPLACER",
          "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
          "type": "index-pattern"
        }
      ],
      "type": "search",
      "updated_at": "2025-09-30T16:38:47.045Z",
      "version": "WzE0NCwxXQ=="
    },
    {
      "attributes": {
        "columns": [
          "network.transport",
          "network.protocol",
          "source.ip",
          "source.port",
          "destination.ip",
          "destination.port",
          "network.bytes",
          "event.id"
        ],
        "description": "",
        "hits": 0,
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"highlightAll\":false,\"version\":true,\"filter\":[],\"query\":{\"query\":{\"query_string\":{\"query\":\"(event.provider:zeek AND event.dataset:conn) OR (event.provider:suricata AND event.dataset:flow)\",\"analyze_wildcard\":true}},\"language\":\"lucene\"},\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"
        },
        "sort": [
          [
            "MALCOLM_NETWORK_INDEX_TIME_FIELD_REPLACER",
            "desc"
          ]
        ],
        "title": "Connections - Logs",
        "version": 1
      },
      "id": "52570870-e9d4-444f-a3df-e44c6757ed9f",
      "migrationVersion": {
        "search": "7.9.3"
      },
      "namespaces": [
        "default"
      ],
      "references": [
        {
          "id": "MALCOLM_NETWORK_INDEX_PATTERN_REPLACER",
          "name": "kibanaSavedObjectMeta.searchSourceJSON.index",
          "type": "index-pattern"
        }
      ],
      "type": "search",
      "updated_at": "2025-10-20T19:16:08.928Z",
      "version": "WzE1MzUsMV0="
    }
  ],
  "version": "3.2.0"
}
